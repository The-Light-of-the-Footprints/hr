<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hr.jiashiq.mapper.SalaryGrantMapper">
  <resultMap id="BaseResultMap" type="com.hr.entity.SalaryGrant">
    <id column="salary_grant_id" jdbcType="VARCHAR" property="salaryGrantId" />
    <result column="salary_standard_id" jdbcType="VARCHAR" property="salaryStandardId" />
    <result column="second_kind_id" jdbcType="CHAR" property="secondKindId" />
    <result column="human_amount" jdbcType="SMALLINT" property="humanAmount" />
    <result column="salary_standard_sum" jdbcType="DECIMAL" property="salaryStandardSum" />
    <result column="salary_paid_sum" jdbcType="DECIMAL" property="salaryPaidSum" />
    <result column="register" jdbcType="VARCHAR" property="register" />
    <result column="regist_time" jdbcType="TIMESTAMP" property="registTime" />
    <result column="checker" jdbcType="VARCHAR" property="checker" />
    <result column="check_time" jdbcType="TIMESTAMP" property="checkTime" />
    <result column="check_status" jdbcType="SMALLINT" property="checkStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    salary_grant_id, salary_standard_id, second_kind_id, human_amount, salary_standard_sum, 
    salary_paid_sum, register, regist_time, checker, check_time, check_status
  </sql>
  <select id="selectByExample" parameterType="com.hr.entity.SalaryGrantExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary_grant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salary_grant
    where salary_grant_id = #{salaryGrantId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from salary_grant
    where salary_grant_id = #{salaryGrantId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.hr.entity.SalaryGrantExample">
    delete from salary_grant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hr.entity.SalaryGrant">
    insert into salary_grant (salary_grant_id, salary_standard_id, 
      second_kind_id, human_amount, salary_standard_sum, 
      salary_paid_sum, register, regist_time, 
      checker, check_time, check_status
      )
    values (#{salaryGrantId,jdbcType=VARCHAR}, #{salaryStandardId,jdbcType=VARCHAR}, 
      #{secondKindId,jdbcType=CHAR}, #{humanAmount,jdbcType=SMALLINT}, #{salaryStandardSum,jdbcType=DECIMAL}, 
      #{salaryPaidSum,jdbcType=DECIMAL}, #{register,jdbcType=VARCHAR}, #{registTime,jdbcType=TIMESTAMP}, 
      #{checker,jdbcType=VARCHAR}, #{checkTime,jdbcType=TIMESTAMP}, #{checkStatus,jdbcType=SMALLINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hr.entity.SalaryGrant">
    insert into salary_grant
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salaryGrantId != null">
        salary_grant_id,
      </if>
      <if test="salaryStandardId != null">
        salary_standard_id,
      </if>
      <if test="secondKindId != null">
        second_kind_id,
      </if>
      <if test="humanAmount != null">
        human_amount,
      </if>
      <if test="salaryStandardSum != null">
        salary_standard_sum,
      </if>
      <if test="salaryPaidSum != null">
        salary_paid_sum,
      </if>
      <if test="register != null">
        register,
      </if>
      <if test="registTime != null">
        regist_time,
      </if>
      <if test="checker != null">
        checker,
      </if>
      <if test="checkTime != null">
        check_time,
      </if>
      <if test="checkStatus != null">
        check_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salaryGrantId != null">
        #{salaryGrantId,jdbcType=VARCHAR},
      </if>
      <if test="salaryStandardId != null">
        #{salaryStandardId,jdbcType=VARCHAR},
      </if>
      <if test="secondKindId != null">
        #{secondKindId,jdbcType=CHAR},
      </if>
      <if test="humanAmount != null">
        #{humanAmount,jdbcType=SMALLINT},
      </if>
      <if test="salaryStandardSum != null">
        #{salaryStandardSum,jdbcType=DECIMAL},
      </if>
      <if test="salaryPaidSum != null">
        #{salaryPaidSum,jdbcType=DECIMAL},
      </if>
      <if test="register != null">
        #{register,jdbcType=VARCHAR},
      </if>
      <if test="registTime != null">
        #{registTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checker != null">
        #{checker,jdbcType=VARCHAR},
      </if>
      <if test="checkTime != null">
        #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkStatus != null">
        #{checkStatus,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hr.entity.SalaryGrantExample" resultType="java.lang.Long">
    select count(*) from salary_grant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update salary_grant
    <set>
      <if test="record.salaryGrantId != null">
        salary_grant_id = #{record.salaryGrantId,jdbcType=VARCHAR},
      </if>
      <if test="record.salaryStandardId != null">
        salary_standard_id = #{record.salaryStandardId,jdbcType=VARCHAR},
      </if>
      <if test="record.secondKindId != null">
        second_kind_id = #{record.secondKindId,jdbcType=CHAR},
      </if>
      <if test="record.humanAmount != null">
        human_amount = #{record.humanAmount,jdbcType=SMALLINT},
      </if>
      <if test="record.salaryStandardSum != null">
        salary_standard_sum = #{record.salaryStandardSum,jdbcType=DECIMAL},
      </if>
      <if test="record.salaryPaidSum != null">
        salary_paid_sum = #{record.salaryPaidSum,jdbcType=DECIMAL},
      </if>
      <if test="record.register != null">
        register = #{record.register,jdbcType=VARCHAR},
      </if>
      <if test="record.registTime != null">
        regist_time = #{record.registTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.checker != null">
        checker = #{record.checker,jdbcType=VARCHAR},
      </if>
      <if test="record.checkTime != null">
        check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.checkStatus != null">
        check_status = #{record.checkStatus,jdbcType=SMALLINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update salary_grant
    set salary_grant_id = #{record.salaryGrantId,jdbcType=VARCHAR},
      salary_standard_id = #{record.salaryStandardId,jdbcType=VARCHAR},
      second_kind_id = #{record.secondKindId,jdbcType=CHAR},
      human_amount = #{record.humanAmount,jdbcType=SMALLINT},
      salary_standard_sum = #{record.salaryStandardSum,jdbcType=DECIMAL},
      salary_paid_sum = #{record.salaryPaidSum,jdbcType=DECIMAL},
      register = #{record.register,jdbcType=VARCHAR},
      regist_time = #{record.registTime,jdbcType=TIMESTAMP},
      checker = #{record.checker,jdbcType=VARCHAR},
      check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      check_status = #{record.checkStatus,jdbcType=SMALLINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hr.entity.SalaryGrant">
    update salary_grant
    <set>
      <if test="salaryStandardId != null">
        salary_standard_id = #{salaryStandardId,jdbcType=VARCHAR},
      </if>
      <if test="secondKindId != null">
        second_kind_id = #{secondKindId,jdbcType=CHAR},
      </if>
      <if test="humanAmount != null">
        human_amount = #{humanAmount,jdbcType=SMALLINT},
      </if>
      <if test="salaryStandardSum != null">
        salary_standard_sum = #{salaryStandardSum,jdbcType=DECIMAL},
      </if>
      <if test="salaryPaidSum != null">
        salary_paid_sum = #{salaryPaidSum,jdbcType=DECIMAL},
      </if>
      <if test="register != null">
        register = #{register,jdbcType=VARCHAR},
      </if>
      <if test="registTime != null">
        regist_time = #{registTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checker != null">
        checker = #{checker,jdbcType=VARCHAR},
      </if>
      <if test="checkTime != null">
        check_time = #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="checkStatus != null">
        check_status = #{checkStatus,jdbcType=SMALLINT},
      </if>
    </set>
    where salary_grant_id = #{salaryGrantId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hr.entity.SalaryGrant">
    update salary_grant
    set salary_standard_id = #{salaryStandardId,jdbcType=VARCHAR},
      second_kind_id = #{secondKindId,jdbcType=CHAR},
      human_amount = #{humanAmount,jdbcType=SMALLINT},
      salary_standard_sum = #{salaryStandardSum,jdbcType=DECIMAL},
      salary_paid_sum = #{salaryPaidSum,jdbcType=DECIMAL},
      register = #{register,jdbcType=VARCHAR},
      regist_time = #{registTime,jdbcType=TIMESTAMP},
      checker = #{checker,jdbcType=VARCHAR},
      check_time = #{checkTime,jdbcType=TIMESTAMP},
      check_status = #{checkStatus,jdbcType=SMALLINT}
    where salary_grant_id = #{salaryGrantId,jdbcType=VARCHAR}
  </update>
</mapper>